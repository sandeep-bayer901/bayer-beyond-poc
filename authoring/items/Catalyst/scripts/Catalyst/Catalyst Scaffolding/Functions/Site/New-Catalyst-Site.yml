---
ID: "da4f7a5b-21a5-4a65-b003-6f58ec90c9a2"
Parent: "81b95bdd-5156-4c7c-946d-d0e4bf0150c4"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/Catalyst/Catalyst Scaffolding/Functions/Site/New-Catalyst-Site"
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    Import-Function Get-SiteMediaItem
    Import-Function Get-SettingsItem
    Import-Function Get-TenantItem
    Import-Function Get-PartialDesignsItem
    Import-Function Get-PageDesignsItem
    Import-Function Test-ItemIsSiteDefinition
    Import-Function Get-OrderedDictionaryByKey
    Import-Function Set-TenantTemplate
    Import-Function Get-TenantTemplate
    Import-Function Get-TenantTemplatesRoot
    Import-Function Get-SiteDefinitions
    Import-Function Get-SortedSetupItemsCollection
    Import-Function New-SiteTheme
    Import-Function Get-TenantDefinition
    Import-Function Get-TenantThemesFolder
    Import-Function Get-TenantMediaLibraryRoot
    Import-Function Add-FolderStructure
    Import-Function Get-ItemOrCreate
    Import-Function Get-Action
    Import-Function Get-InvokedTenantAction
    Import-Function Run-SiteManager
    Import-Function Invoke-InputValidationStep
    Import-Function Invoke-PostSetupStep
    Import-Function Get-GridDefinition
    Import-Function Copy-Child-Items-To-A-Location
    
    
    function Show-NewCatalystSiteDialog {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 0 )]
            [Item]$SiteLocation
        )
    
        begin {
            Write-Verbose "Cmdlet Show-NewCatalystSiteDialog - Begin"
            Import-Function Get-ForbiddenSiteName
            Import-Function Get-ValidSiteSetupDefinition
            Write-Progress -Activity ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::PreparingNewSiteDialog)) -CurrentOperation ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::BuildingNewSiteDialog)) -PercentComplete 0
        }
    
        process {
            Write-Verbose "Cmdlet Show-NewCatalystSiteDialog - Process"
            Write-Progress -Activity ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::PreparingNewSiteDialog)) -CurrentOperation ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::GettingTenantTemplates)) -PercentComplete 20
            $tenantTemplatesRoot = Get-TenantTemplatesRoot $SiteLocation
            if ($tenantTemplatesRoot -eq $null) {
                Write-Host "Tenant Templates root could not be found for a given location: '$($SiteLocation.Paths.Path)'" -ForegroundColor Red
                return
            }
            $TenantTemplates = Get-TenantTemplate $tenantTemplatesRoot
    
            $dialogOptions = New-Object System.Collections.Specialized.OrderedDictionary
    
            [Item[]]$allDefinitions = Get-SiteDefinitions "*"
    
            Write-Progress -Activity ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::PreparingNewSiteDialog)) -CurrentOperation ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::GettingValidSiteDefinitions)) -PercentComplete 30
            $allDefinitions = Get-ValidSiteSetupDefinition $SiteLocation $allDefinitions
    
            Write-Progress -Activity ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::PreparingNewSiteDialog)) -CurrentOperation ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::PreparingDialogOptions)) -PercentComplete 50
            ##Catalyst Changes
            $catalystSiteModules = [Sitecore.Data.Fields.MultilistField]$SiteLocation.Fields['Modules'];
            $nonSystemDefinitions = $catalystSiteModules.GetItems()  #$allDefinitions | ? { ([Sitecore.Data.Fields.CheckboxField]$_.Fields['IsSystemModule']).Checked -eq $false } | ? { $_.IncludeIfInstalled.Length -eq 0 }
    
            $nonSystemDefinitions | % {
                $contextItem = Get-Item -Path master: -ID $_.ID
                $key = "$($_.Fields['Name'].Value)"
                $translatedFeatureName = $contextItem.Fields['Name'].Value
                if ([string]::IsNullOrEmpty($translatedFeatureName)) {
                    $translatedFeatureName = $key
                }
                if ($dialogOptions.Contains($translatedFeatureName)) {
                    $index = 2
                    do {
                        $translatedFeatureName = $translatedFeatureName + " [$index]"
                        $index++
                    } while ($dialogOptions.Contains($translatedFeatureName))
                }
    
                $dialogOptions.Add($translatedFeatureName, $_.ID)
            }
            ##Catalyst Changes
            $preSelectedDefinitions = $nonSystemDefinitions | ? { ([Sitecore.Data.Fields.CheckboxField]$_.Fields['IncludeByDefault']).Checked -eq $true } | % { $_.ID }
    
            $languages = [ordered]@{}
            Get-ChildItem -Path "/sitecore/system/languages" | % { $languages[$_.Name] = $_.Name } > $null
            $gridSetupItems = [ordered]@{}
            Get-GridDefinition "*" | ForEach-Object {
                $displayName = $_.Fields['Name'].Value
                if ($displayName -and $displayName.length -gt 0) {
                    $gridSetupItems[$displayName] = $_.ID
                }
                else {
                    $gridSetupItems[$_.Name] = $_.ID
                }
            }
    
            $dialogOptions = Get-OrderedDictionaryByKey $dialogOptions
            Write-Progress -Activity ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::PreparingNewSiteDialog)) -CurrentOperation ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::OpeningNewSiteDialog)) -PercentComplete 100
    
            $siteName = [Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::NewSite)
            $hostName = "*"
            $virtualFolder = "/"
            $language = "en"
            $createNewTheme = $false
            $themeName = [Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::SiteThemeName)
    
    
            $parameters = @()        
            ## Catalyst Changes
            $parameters += @{ Name = "siteLocation"; Source = "DataSource=/sitecore/content&DatabaseName=master&IncludeTemplatesForSelection=JSS Site Folder"; editor = "droptree"; Title = [Sitecore.Globalization.Translate]::Text("Site Location"); Tab = [Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::General) }
            $parameters += @{ Name = "siteName"; Title = [Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::SiteName); Tab = [Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::General); }
            $parameters += @{ Name = "hostName"; Title = [Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::HostName); Tab = [Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::General)}
            $parameters += @{ Name = "virtualFolder"; Title = [Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::VirtualFolder); Tab = [Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::General)}
            $parameters += @{ Name = "language"; Options = $languages; Title = [Sitecore.Globalization.Translate]::Text("Language"); Tab = [Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::General); }
            ## Catalyst Base Page Designs
            $parameters += @{ Name = "pageTypes"; Source = "DataSource=$($SiteLocation.Paths.Path)/Presentation/Page Designs&DatabaseName=master&IncludeTemplatesForSelection=Page Design"; editor = "treelist"; Title = [Sitecore.Globalization.Translate]::Text("Page Types"); Tab = [Sitecore.Globalization.Translate]::Text("PageDesigns") }
    
            if ($dialogOptions.Count -gt 0) {
                $parameters += @{ Name = "preSelectedDefinitions"; Title = [Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::Features); Options = $dialogOptions; Editor = "checklist"; Tip = [Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::SelectTheFeaturesWhichShouldBeUsedInSite); Height = "330px"; Tab = [Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::Features); }
            }
            do {
                $result = Read-Variable -Parameters $parameters `
                    -Description $([Sitecore.Globalization.Translate]::Text("This Modal window helpts to create a new Catalyst Site")) `
                    -Title $([Sitecore.Globalization.Translate]::Text("Create New Catalyst Site")) -Width 500 -Height 600 `
                    -OkButtonName $([Sitecore.Globalization.Translate]::Text("Ok")) -CancelButtonName $([Sitecore.Globalization.Translate]::Text("Cancel")) `
                    -Validator {
                    $siteName = $variables.siteName.Value;
                    $pattern = "^[\w][\w\s\-]*(\(\d{1,}\)){0,1}$"
                    if ($siteName.Length -gt 100) {
                        $variables.siteName.Error = $([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::ThelengthofthevalueistoolongPleasespecifyavalueoflesstha)) -f 100
                        continue
                    }
                    if ([System.Text.RegularExpressions.Regex]::IsMatch($siteName, $pattern, [System.Text.RegularExpressions.RegexOptions]::ECMAScript) -eq $false) {
                        $variables.siteName.Error = $([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::IsNotAValidName)) -f $siteName
                        continue
                    }
                    if ($forbiddenSiteNames -contains $siteName -eq $true) {
                        $variables.siteName.Error = $([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::SiteWithThatNameAlreadyExists))
                        continue
                    }
                } `
                    -ValidatorParameters @{forbiddenSiteNames = (Get-ForbiddenSiteName $siteLocation)}
                
                if ($result -ne "ok") {
                    Close-Window
                    Exit
                }
                
                $definitionItems = New-Object System.Collections.ArrayList($null)
                if ($preSelectedDefinitions) {
                    Write-Verbose "Adding pre-selected features"
                    [Item[]]$preSelectedDefinitionItems = ($preSelectedDefinitions | % { Get-Item -Path master: -ID $_ })
                    $definitionItems.AddRange($preSelectedDefinitionItems)
                }
    
                $model = New-Object Sitecore.XA.Foundation.Scaffolding.Models.CreateNewSiteModel
                $model.SiteName = $siteName.TrimEnd(" ")
                $model.DefinitionItems = $definitionItems
                $model.CreateSiteTheme = $createNewTheme
                $model.ThemeName = $themeName
                $model.ValidThemes = $validThemes
                $model.Language = $language
                $model.HostName = $hostName
                $model.VirtualFolder = $virtualFolder
                $model.GridSetup = $gridSetupItem
                $model.SiteLocation = $siteLocation
                $inputValidationResult = Invoke-PreSiteCreationValidation $model
    
            } while (-not($inputValidationResult))
            $model
        }
    
        end {
            Write-Verbose "Cmdlet Show-NewCatalystSiteDialog - End"
        }
    }
    
    function New-Catalyst-Site {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 0)]
            [Sitecore.XA.Foundation.Scaffolding.Models.CreateNewSiteModel]$Model
        )
    
        begin {
            Write-Verbose "Cmdlet New-Catalyst-Site - Begin"
            Import-Function Invoke-SiteAction
            Import-Function New-MappingString
            Import-Function Add-SiteMediaLibrary
        }
    
        process {
            Write-Verbose "Cmdlet New-Catalyst-Site - Process"
            New-UsingBlock (New-Object Sitecore.Data.BulkUpdateContext) {
                if ($Model.SiteName -and $Model.DefinitionItems) {
                    [string]$SiteName = $Model.SiteName
                    [Item[]]$DefinitionItems = Get-SortedSetupItemsCollection $Model.DefinitionItems
                    [string]$language = $Model.Language
                    [string]$hostName = $Model.HostName
                    [string]$virtualFolder = $Model.VirtualFolder
                    [Item]$gridSetupItem = $Model.GridSetup
                    [Item]$SiteLocation = $Model.SiteLocation
    
                    $CreateSiteTheme = $Model.CreateSiteTheme
                    $ThemeName = $Model.ThemeName
                    [Item[]]$ValidThemes = $Model.ValidThemes
    
                    Write-Verbose "Cmdlet Add-Site - Process"
                    Write-Verbose "Creating site ($SiteName) under: $($SiteLocation.Paths.Path)"
                    Write-Verbose "Definitions items count: $($DefinitionItems.Length)"
                    ##Catalyst Site Branch
                    $siteBranch = "Branches/Project/Catalyst/Scaffolding/Catalyst Site"
    
                    Write-Progress -Activity ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::CreatingNewSite)) -CurrentOperation ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::GettingTenantItem)) -PercentComplete 0
                    $tenant = Get-TenantItem $SiteLocation
                    $tenantTemplatesRootID = $tenant.Fields['Templates'].Value
                    $tenantTemplatesRoot = Get-Item -Path master: -ID $tenantTemplatesRootID
    
                    Write-Progress -Activity ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::CreatingNewSite)) -CurrentOperation ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::GettingTenantTemplates)) -PercentComplete 10
                    $tenantTemplates = Get-TenantTemplate $tenantTemplatesRoot
                    $site = New-Item -Parent $SiteLocation -Name $SiteName -ItemType $siteBranch -Language $language
    
                    Write-Progress -Activity ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::CreatingNewSite)) -CurrentOperation ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::SettingTenantTemplatesLocation)) -PercentComplete 15
                    Set-TenantTemplate $site $tenantTemplates
    
                    Write-Progress -Activity ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::CreatingNewSite)) -CurrentOperation ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::CreatingSiteMediaLibrary)) -PercentComplete 20
                    $siteMediaLibrary = Add-SiteMediaLibrary $site
                    $settingsItem = Get-SettingsItem $Site
                    # $settingsItem.MediaLibrary = $siteMediaLibrary.ID
                    $settingsItem.Templates = $tenant.Templates
                    (Get-SiteMediaItem $Site).AdditionalChildren = $siteMediaLibrary.ID, $tenant.SharedMediaLibrary -join "|"
    
    
                    $site.SiteMediaLibrary = $siteMediaLibrary.ID
    
                    Write-Progress -Activity ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::CreatingNewSite)) -CurrentOperation ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::ConfiguringSiteDefinitionItem)) -PercentComplete 93
                    $siteDefinitionItem = Get-ChildItem -Recurse -Path ($settingsItem.Paths.Path) | ? { (Test-ItemIsSiteDefinition $_) -eq $true } | Select-Object -First 1
                
                    $siteDefinitionItem.HostName = $hostName
                    $siteDefinitionItem.VirtualFolder = $virtualFolder
    
                    if ([string]::IsNullOrWhiteSpace($siteDefinitionItem.SiteName) -or ("`$name" -eq $siteDefinitionItem.SiteName)) {
                        $siteDefinitionItem.SiteName = $siteDefinitionItem.Name
                    }
                
                    if ([string]::IsNullOrWhiteSpace($siteDefinitionItem.Environment)) {
                        $siteDefinitionItem.Environment = "*"
                    }
                
                    Write-Progress -Activity ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::CreatingNewSite)) -CurrentOperation ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::InitializingPresentation)) -PercentComplete 95
                    Initialize-Presentation $site $tenantTemplates $language
    
                    Write-Progress -Activity ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::CreatingNewSite)) -CurrentOperation ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::SettingTenantTemplatesLocation)) -PercentComplete 99
                    Set-TenantTemplate $site $tenantTemplates
                
                    $site = $site.Database.GetItem($site.ID) | Wrap-Item
                    $site.Modules = $DefinitionItems.ID -join "|"            
    
                    Invoke-PostSiteSetupStep $Model
                    Run-SiteManager
                }
                else {
                    Write-Error "Could not create site. Site name or module definitions is undefined"
                }
            }
        }
        end {
            Write-Progress -Activity ([Sitecore.Globalization.Translate]::Text([Sitecore.XA.Foundation.Scaffolding.Texts]::YourSiteHasBeenCreated)) -CurrentOperation "" -PercentComplete 100
            Write-Verbose "Cmdlet New-Catalyst-Site - End"
        }
    }
    
    function Invoke-PostSiteSetupStep {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 0 )]
            [Sitecore.XA.Foundation.Scaffolding.Models.CreateNewSiteModel]$Model
        )
    
        begin {
            Write-Verbose "Cmdlet Invoke-PostSiteSetupStep - Begin"
        }
    
        process {
            Write-Verbose "Cmdlet Invoke-PostSiteSetupStep - Process"
            Invoke-PostSetupStep $Model.DefinitionItems $Model
        }
    
        end {
            Write-Verbose "Cmdlet Invoke-PostSiteSetupStep - End"
        }
    }
    
    function Invoke-PreSiteCreationValidation {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 0 )]
            [Sitecore.XA.Foundation.Scaffolding.Models.CreateNewSiteModel]$Model
        )
    
        begin {
            Write-Verbose "Cmdlet Invoke-PreSiteCreationValidation - Begin"
        }
    
        process {
            Write-Verbose "Cmdlet Invoke-PreSiteCreationValidation - Process"
            Invoke-InputValidationStep $Model.DefinitionItems $Model
        }
    
        end {
            Write-Verbose "Cmdlet Invoke-PreSiteCreationValidation - End"
        }
    }
    
    function Initialize-Presentation {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 0 )]
            [Item]$SiteItem,
    
            [Parameter(Mandatory = $true, Position = 1 )]
            [Item[]]$TenantTemplates,
    
            [Parameter(Mandatory = $false, Position = 2 )]
            [string]$Language = "en"
        )
    
        begin {
            Write-Verbose "Cmdlet Initialize-Presentation - Begin"
        }
    
        process {
            Write-Verbose "Cmdlet Initialize-Presentation - Process"
            $pageDesigns = Get-PageDesignsItem $SiteItem
            $partialDesigns = Get-PartialDesignsItem $SiteItem
            $designTemplate = Get-Item master: -ID ([Sitecore.XA.Foundation.Presentation.Templates+Design]::ID)
            $defaultDesign = New-Item -Parent $pageDesigns -Name "Default" -ItemType $designTemplate.Paths.Path -Language $Language | Wrap-Item
            $partialDesignsIDs = $partialDesigns.Children |? { ($_.Name -eq "Empty") -or ($_.Name -eq "Metadata") } | % { $_.ID }
            $defaultDesign.PartialDesigns = $partialDesignsIDs -join '|'
    
            $pageTemplates = $TenantTemplates | ? { [Sitecore.XA.Foundation.SitecoreExtensions.Extensions.ItemExtensions]::DoesTemplateInheritFrom($_, '{3F8A6A5D-7B1A-4566-8CD4-0A50F3030BD8}') }
            $mappings = @{}
            $pageTemplates | ForEach-Object { $mappings.Add($_.ID, "$($defaultDesign.ID)") }
            $pageDesigns.TemplatesMapping = New-MappingString $mappings
        }
    
        end {
            Write-Verbose "Cmdlet Initialize-Presentation - End"
        }
    }
    
    function Get-SiteThemesFolder {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 0)]
            [Item]$Site
        )
    
        begin {
            Write-Verbose "Cmdlet Get-SiteThemesFolder - Begin"
        }
    
        process {
            Write-Verbose "Cmdlet Get-SiteThemesFolder - Process"
            $TenantThemesFolder = Get-TenantThemesFolder $site
    
            $folderType = "/System/Media/Media folder"
            $folderName = $Site.Name
    
            $themesFolder = Get-ItemOrCreate $TenantThemesFolder $folderName $folderType
            return $themesFolder
        }
    
        end {
            Write-Verbose "Cmdlet Get-SiteThemesFolder - End"
        }
    }
    
    function New-EditingTheme {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true, Position = 0 )]
            [Item]$ThemeLocation,
    
            [Parameter(Mandatory = $true, Position = 1 )]
            [string]$ThemeName,
    
            [Parameter(Mandatory = $false, Position = 2 )]
            [Sitecore.Data.ID[]]$BaseThemesID,
    
            [Parameter(Mandatory = $false, Position = 3 )]
            [string]$Language = "en"
        )
    
        begin {
            Write-Verbose "Cmdlet New-EditingTheme - Begin"
        }
    
        process {
            Write-Verbose "Cmdlet New-EditingTheme - Process"
            $baseTheme = Get-Item master: -ID ([Sitecore.XA.Foundation.Theming.Templates+BaseTheme]::ID)
            $siteTheme = New-Item -Parent $ThemeLocation -ItemType $baseTheme.Paths.Path  -Name $ThemeName  -Language $Language
            if ($BaseThemesID) {
                $siteTheme.BaseLayout = $BaseThemesID -join '|'
            }
            $siteTheme
        }
    
        end {
            Write-Verbose "Cmdlet New-EditingTheme - End"
        }
    }
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20221120T191816Z
    - ID: "52807595-0f8f-4b20-8d2a-cb71d28c6103"
      Hint: __Owner
      Value: |
        sitecore\ramkumar.nambhi@valtech.com
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\ramkumar.nambhi@valtech.com
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "307412f3-cf11-4ba3-9ec0-b1e86a0b9b3b"
    - ID: "badd9cf9-53e0-4d0c-bcc0-2d784c282f6a"
      Hint: __Updated by
      Value: |
        sitecore\ramkumar.nambhi@valtech.com
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20221125T111942Z
